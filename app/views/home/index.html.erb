<style>
  /* Reset and base styles */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    background: #E7E8D1;
    color: #B85042;
    line-height: 1.4;
    padding-bottom: 80px;
  }

  /* Header */
  .header {
    padding: 1rem;
    background: #E7E8D1;
    color: #B85042;
    position: sticky;
    top: 0;
    z-index: 100;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(62, 86, 75, 0.1);
  }

  .header h1 {
    font-size: 1.25rem;
    font-weight: 600;
  }

  @media (min-width: 768px) {
    .header h1 {
      font-size: 1.5rem;
    }
  }

  /* Buttons */
  .add-button {
    background: #B85042;
    border: none;
    color: #E7E8D1;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  .add-button:hover {
    opacity: 0.9;
  }

  .sync-buttons {
    display: flex;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: #E7E8D1;
    border-bottom: 1px solid rgba(62, 86, 75, 0.1);
  }

  .sync-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border: 1px solid #B85042;
    background: transparent;
    color: #B85042;
    border-radius: 8px;
    font-size: 0.875rem;
    cursor: pointer;
    flex: 1;
    transition: background 0.2s ease;
  }

  .sync-button:hover {
    background: rgba(62, 86, 75, 0.1);
  }

  .sync-button svg {
    width: 20px;
    height: 20px;
  }

  /* Book list */
  .book-list {
    padding: 1rem;
    max-width: 600px;
    margin: 0 auto;
  }

  /* Book card */
  .book-card {
    background: white;
    margin-bottom: 1rem;
    border-radius: 12px;
    overflow: hidden;
    position: relative;
    touch-action: pan-x;
    transform: translateX(0);
    transition: transform 0.3s ease;
    box-shadow: 0 2px 8px rgba(62, 86, 75, 0.1);
    transition: transform 0.3s ease, opacity 0.3s ease;
  }

  .book-content {
    padding: 1.25rem;
    background: white;
  }

  .book-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: #B85042;
  }

  .book-details {
    font-size: 0.875rem;
    color: #B85042;
    opacity: 0.8;
    display: flex;
    justify-content: space-between;
  }

  .return-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 24px;
    height: 24px;
    border: 2px solid #B85042;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    transition: all 0.3s ease;
  }

  .return-button svg {
    width: 14px;
    height: 14px;
    stroke: #B85042;
    stroke-width: 2;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .return-button:hover {
    background: rgba(184, 80, 66, 0.1);
  }

  .book-card.returned .return-button {
    background: #B85042;
  }

  .book-card.returned .return-button svg {
    opacity: 1;
    stroke: #E7E8D1;
  }

  .book-card.slide-out {
    transform: translateX(-100%);
    opacity: 0;
    transition: transform 0.3s ease, opacity 0.3s ease;
  }


  /* Add form */
  .add-form {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: white;
    padding: 1.25rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
    box-shadow: 0 -2px 10px rgba(62, 86, 75, 0.1);
    border-top-left-radius: 16px;
    border-top-right-radius: 16px;
  }

  .add-form.visible {
    transform: translateY(0);
  }

  .form-group {
    margin-bottom: 1.25rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #B85042;
  }

  .form-group input {
    width: 100%;
    padding: 0.875rem;
    border: 1px solid rgba(62, 86, 75, 0.2);
    border-radius: 8px;
    font-size: 1rem;
    color: #B85042;
    background: #E7E8D1;
  }

  .form-group input:focus {
    outline: none;
    border-color: #B85042;
    box-shadow: 0 0 0 2px rgba(62, 86, 75, 0.1);
  }

  .form-actions {
    display: flex;
    gap: 1rem;
  }

  .form-actions button {
    flex: 1;
    padding: 0.875rem;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.2s ease;
  }

  .save-button {
    background: #B85042;
    color: #E7E8D1;
  }

  .save-button:hover {
    opacity: 0.9;
  }

  .cancel-button {
    background: rgba(62, 86, 75, 0.1);
    color: #B85042;
  }

  .cancel-button:hover {
    opacity: 0.8;
  }

  /* Utilities */
  .hidden {
    display: none;
  }

  /* Return animation */
  .returned {
    opacity: 0.6;
  }

  .returned .book-content {
    background: rgba(231, 232, 209, 0.5);
  }
</style>

<header class="header">
  <h1>Bookerang</h1>
  <button class="add-button" onclick="showAddForm()">+ Add Book</button>
</header>

<div class="sync-buttons">
  <button class="sync-button" onclick="exportData()">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
      <polyline points="17 8 12 3 7 8"/>
      <line x1="12" y1="3" x2="12" y2="15"/>
    </svg>
    Export
  </button>
  <button class="sync-button" onclick="showImportDialog()">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
      <polyline points="7 10 12 15 17 10"/>
      <line x1="12" y1="15" x2="12" y2="3"/>
    </svg>
    Import
  </button>
</div>

<main class="book-list" id="bookList"></main>

<form class="add-form" id="addForm">
  <div class="form-group">
    <label for="title">Book Title</label>
    <input type="text" id="title" required>
  </div>
  <div class="form-group">
    <label for="borrower">Borrower Name</label>
    <input type="text" id="borrower" required>
  </div>
  <div class="form-group">
    <label for="loanDate">Loan Date</label>
    <input type="date" id="loanDate" required>
  </div>
  <div class="form-actions">
    <button type="button" class="cancel-button" onclick="hideAddForm()">Cancel</button>
    <button type="submit" class="save-button">Save</button>
  </div>
</form>

<!-- Scripts -->
<script>
  // Initialize IndexedDB
  let db;
  const request = indexedDB.open("BookerangDB", 1);

  request.onerror = (event) => {
    console.error("Database error:", event.target.error);
  };

  request.onupgradeneeded = (event) => {
    const db = event.target.result;
    if (!db.objectStoreNames.contains("books")) {
      db.createObjectStore("books", { keyPath: "id", autoIncrement: true });
    }
  };

  request.onsuccess = (event) => {
    db = event.target.result;
    loadBooks();
  };

  // UI Functions
  function showAddForm() {
    const form = document.getElementById('addForm');
    const dateInput = document.getElementById('loanDate');
    dateInput.value = new Date().toISOString().split('T')[0]; // Set today's date
    form.classList.add('visible');
  }

  function hideAddForm() {
    document.getElementById('addForm').classList.remove('visible');
    document.getElementById('addForm').reset();
  }

  function formatDateForDisplay(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-GB', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  async function addBook(event) {
    event.preventDefault();

    const book = {
      title: document.getElementById('title').value,
      borrower: document.getElementById('borrower').value,
      loanDate: document.getElementById('loanDate').value,
      returned: false,
      createdAt: new Date().toISOString()
    };

    const transaction = db.transaction(["books"], "readwrite");
    const store = transaction.objectStore("books");

    store.add(book);

    transaction.oncomplete = () => {
      hideAddForm();
      loadBooks();
    };
  }

  function loadBooks() {
    const bookList = document.getElementById('bookList');

    const transaction = db.transaction(["books"], "readonly");
    const store = transaction.objectStore("books");
    const request = store.getAll();

    request.onsuccess = () => {
      const books = request.result;

      if (books.length === 0) {
        bookList.innerHTML = '<p style="text-align: center; padding: 2rem; color: #B85042; opacity: 0.7;">No books added yet</p>';
        return;
      }

      bookList.innerHTML = books.map(book => `
        <div class="book-card ${book.returned ? 'returned' : ''}" data-id="${book.id}">
          <button
            class="return-button"
            onclick="toggleReturn(${book.id})"
            title="${book.returned ? 'Mark as not returned' : 'Mark as returned'}"
          >
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
          </button>
          <div class="book-content">
            <h2 class="book-title">${book.title}</h2>
            <div class="book-details">
              <span>Borrowed by: ${book.borrower}</span>
              <span>${formatDateForDisplay(book.loanDate)}</span>
            </div>
          </div>
        </div>
      `).join('');
    };
  }

function toggleReturn(bookId) {
  const transaction = db.transaction(["books"], "readwrite");
  const store = transaction.objectStore("books");

  const getRequest = store.get(bookId);

  getRequest.onsuccess = () => {
    const book = getRequest.result;

    // Delete the book from storage instead of marking it returned
    const deleteRequest = store.delete(bookId);

    // Animate the card
    const card = document.querySelector(`.book-card[data-id="${bookId}"]`);
    card.classList.add('slide-out');

    // Remove the card after animation
    setTimeout(() => {
      card.remove();
      // Check if there are any books left
      const remainingBooks = document.querySelectorAll('.book-card');
      if (remainingBooks.length === 0) {
        const bookList = document.getElementById('bookList');
        bookList.innerHTML = '<p style="text-align: center; padding: 2rem; color: #B85042; opacity: 0.7;">No books added yet</p>';
      }
    }, 300);
  };
}

// Export functionality using Share API with fallback
async function exportData() {
  const transaction = db.transaction(["books"], "readonly");
  const store = transaction.objectStore("books");
  const request = store.getAll();

  request.onsuccess = async () => {
    const books = request.result;
    const exportData = JSON.stringify(books, null, 2);
    const fileName = `bookerang_${new Date().toISOString().split('T')[0]}.json`;

    // Try to use Share API first
    if (navigator.share) {
      const file = new File([exportData], fileName, {
        type: 'application/json'
      });

      try {
        await navigator.share({
          files: [file],
          title: 'Export Bookerang Data',
          text: 'My Bookerang book lending data'
        });
      } catch (err) {
        // Fallback to download if share is cancelled or fails
        downloadFile(exportData, fileName);
      }
    } else {
      // Fallback for browsers without Share API
      downloadFile(exportData, fileName);
    }
  };
}

// Helper function to trigger file download
function downloadFile(content, fileName) {
  const blob = new Blob([content], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = fileName;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// Show import dialog
function showImportDialog() {
  const modal = document.createElement('div');
  modal.innerHTML = `
    <div id="importModal" style="
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    ">
      <div style="
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      ">
        <h2 style="margin-bottom: 1rem; color: #B85042;">Import Books</h2>
        <textarea id="importData" style="
          width: 100%;
          height: 200px;
          padding: 0.75rem;
          border: 1px solid rgba(62, 86, 75, 0.2);
          border-radius: 8px;
          margin-bottom: 1rem;
          font-family: monospace;
          resize: vertical;
        " placeholder="Paste your Bookerang JSON data here..."></textarea>
        <div style="display: flex; gap: 1rem;">
          <button onclick="closeImportDialog()" style="
            flex: 1;
            padding: 0.875rem;
            border: none;
            border-radius: 8px;
            background: rgba(62, 86, 75, 0.1);
            color: #B85042;
            font-weight: 600;
            cursor: pointer;
          ">Cancel</button>
          <button onclick="importData()" style="
            flex: 1;
            padding: 0.875rem;
            border: none;
            border-radius: 8px;
            background: #B85042;
            color: #E7E8D1;
            font-weight: 600;
            cursor: pointer;
          ">Import</button>
        </div>
      </div>
    </div>
  `;
  document.body.appendChild(modal);
}

// Close import dialog
function closeImportDialog() {
  const modal = document.getElementById('importModal').parentElement;
  document.body.removeChild(modal);
}

// Import data from textarea
async function importData() {
  const importText = document.getElementById('importData').value;

  try {
    const books = JSON.parse(importText);

    if (!Array.isArray(books)) {
      throw new Error('Invalid data format');
    }

    const transaction = db.transaction(["books"], "readwrite");
    const store = transaction.objectStore("books");

    // Import each book
    const promises = books.map(book => {
      // Remove any existing id to avoid conflicts
      const { id, ...bookData } = book;
      return new Promise((resolve, reject) => {
        const request = store.add(bookData);
        request.onsuccess = () => resolve();
        request.onerror = () => reject();
      });
    });

    await Promise.all(promises);
    closeImportDialog();
    loadBooks(); // Refresh the book list

    // Show success message
    alert('Books imported successfully!');
  } catch (error) {
    alert('Error importing data. Please check the format and try again.');
  }
}

  // Initialize event listeners
  document.getElementById('addForm').addEventListener('submit', addBook);

  // Service Worker Registration
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then(registration => {
          console.log('ServiceWorker registered successfully');
        })
        .catch(error => {
          console.log('ServiceWorker registration failed:', error);
        });
    });
  }
</script>